{"ast":null,"code":"export const Deck = {\n  async creerPaquet() {\n    try {\n      // Crée un nouveau paquet et récupère l'ID du paquet\n      const reponse = await fetch(\"https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1\");\n      const donnees = await reponse.json();\n\n      // Vérifie que la réponse contient un deck_id valide\n      if (donnees.success && donnees.deck_id) {\n        // Utilise le deck_id pour tirer les cartes\n        const paquet = await this.tirerCartes(donnees.deck_id);\n        return paquet;\n      } else {\n        throw new Error(\"Erreur lors de la création du paquet.\");\n      }\n    } catch (error) {\n      console.error(\"Erreur lors de la récupération du paquet :\", error);\n      return []; // Retourne un tableau vide en cas d'erreur\n    }\n  },\n  async tirerCartes(deck_id) {\n    try {\n      // Tire 52 cartes du paquet créé\n      const reponse = await fetch(`https://deckofcardsapi.com/api/deck/${deck_id}/draw/?count=52`);\n      const donnees = await reponse.json();\n      console.log('Donnees', donnees);\n\n      // Vérifie si les cartes sont présentes dans la réponse\n      if (donnees.cards) {\n        // Récupère les codes des cartes\n        return donnees.cards.map(carte => carte.code);\n      } else {\n        throw new Error(\"Erreur lors de la récupération des cartes.\");\n      }\n    } catch (error) {\n      console.error(\"Erreur lors de la récupération des cartes :\", error);\n      return []; // Retourne un tableau vide en cas d'erreur\n    }\n  }\n};","map":{"version":3,"names":["Deck","creerPaquet","reponse","fetch","donnees","json","success","deck_id","paquet","tirerCartes","Error","error","console","log","cards","map","carte","code"],"sources":["C:/Users/sameh/OneDrive/Documents/Desktop/Horloge2/travail22025/src/JeuxHorloge/Deck.tsx"],"sourcesContent":["export interface Cartes {\n    valeur: string;\n    couleur: string;\n  }\n  \n  export const Deck = {\n    async creerPaquet(): Promise<string[]> {\n      try {\n        // Crée un nouveau paquet et récupère l'ID du paquet\n        const reponse = await fetch(\n          \"https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1\"\n        );\n        const donnees = await reponse.json();\n  \n        // Vérifie que la réponse contient un deck_id valide\n        if (donnees.success && donnees.deck_id) {\n          // Utilise le deck_id pour tirer les cartes\n          const paquet = await this.tirerCartes(donnees.deck_id);\n          return paquet;\n        } else {\n          throw new Error(\"Erreur lors de la création du paquet.\");\n        }\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération du paquet :\", error);\n        return []; // Retourne un tableau vide en cas d'erreur\n      }\n    },\n  \n    async tirerCartes(deck_id: string): Promise<string[]> {\n      try {\n        // Tire 52 cartes du paquet créé\n        const reponse = await fetch(\n          `https://deckofcardsapi.com/api/deck/${deck_id}/draw/?count=52`\n        );\n        const donnees = await reponse.json();\n\n        console.log('Donnees',donnees)\n  \n        // Vérifie si les cartes sont présentes dans la réponse\n        if (donnees.cards) {\n          // Récupère les codes des cartes\n          return donnees.cards.map((carte: any) => carte.code);\n        } else {\n          throw new Error(\"Erreur lors de la récupération des cartes.\");\n        }\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des cartes :\", error);\n        return []; // Retourne un tableau vide en cas d'erreur\n      }\n    },\n  };\n  \n  "],"mappings":"AAKE,OAAO,MAAMA,IAAI,GAAG;EAClB,MAAMC,WAAWA,CAAA,EAAsB;IACrC,IAAI;MACF;MACA,MAAMC,OAAO,GAAG,MAAMC,KAAK,CACzB,+DACF,CAAC;MACD,MAAMC,OAAO,GAAG,MAAMF,OAAO,CAACG,IAAI,CAAC,CAAC;;MAEpC;MACA,IAAID,OAAO,CAACE,OAAO,IAAIF,OAAO,CAACG,OAAO,EAAE;QACtC;QACA,MAAMC,MAAM,GAAG,MAAM,IAAI,CAACC,WAAW,CAACL,OAAO,CAACG,OAAO,CAAC;QACtD,OAAOC,MAAM;MACf,CAAC,MAAM;QACL,MAAM,IAAIE,KAAK,CAAC,uCAAuC,CAAC;MAC1D;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;MAClE,OAAO,EAAE,CAAC,CAAC;IACb;EACF,CAAC;EAED,MAAMF,WAAWA,CAACF,OAAe,EAAqB;IACpD,IAAI;MACF;MACA,MAAML,OAAO,GAAG,MAAMC,KAAK,CACzB,uCAAuCI,OAAO,iBAChD,CAAC;MACD,MAAMH,OAAO,GAAG,MAAMF,OAAO,CAACG,IAAI,CAAC,CAAC;MAEpCO,OAAO,CAACC,GAAG,CAAC,SAAS,EAACT,OAAO,CAAC;;MAE9B;MACA,IAAIA,OAAO,CAACU,KAAK,EAAE;QACjB;QACA,OAAOV,OAAO,CAACU,KAAK,CAACC,GAAG,CAAEC,KAAU,IAAKA,KAAK,CAACC,IAAI,CAAC;MACtD,CAAC,MAAM;QACL,MAAM,IAAIP,KAAK,CAAC,4CAA4C,CAAC;MAC/D;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;MACnE,OAAO,EAAE,CAAC,CAAC;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}