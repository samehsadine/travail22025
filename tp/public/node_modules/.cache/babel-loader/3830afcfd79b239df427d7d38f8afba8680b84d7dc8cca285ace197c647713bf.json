{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sameh\\\\OneDrive\\\\Documents\\\\Desktop\\\\Horloge2\\\\travail22025\\\\src\\\\JeuxDemineur\\\\Demineur.tsx\",\n  _s = $RefreshSig$();\n/*import React, { useState, useEffect } from 'react';\nimport Grille from './Grille';\nimport Minuteur from './Minuteur';\nimport CompteurDrapeaux from './CompteurDrapeaux';\nimport ChoixNomUtilisateur from './ChoixNomUtilisateur';\n\n// App est le composant principal du jeu Démineur\nexport function Demineur() {\n  // Définir les niveaux de difficulté du jeu\n  const niveauxDeDifficulte = {\n    facile: { taille: 8, mines: 10 },    // Facile : 8x8, 10 mines\n    intermédiaire: { taille: 16, mines: 40 }, // Intermédiaire : 16x16, 40 mines\n    expert: { taille: 24, mines: 99 },   // Expert : 24x24, 99 mines\n  };\n\n  // États pour stocker les différentes valeurs du jeu\n  const [grille, setGrille] = useState([]);         // Grille du jeu (où les cellules du démineur sont stockées)\n  const [estPartieTerminee, setEstPartieTerminee] = useState(false); // État pour vérifier si le jeu est terminé\n  const [minesRestantes, setMinesRestantes] = useState(10); // Mines restantes sur la grille\n  const [minuteur, setMinuteur] = useState(0);        // Compteur pour le temps de jeu\n  const [minuteurEnCours, setMinuteurEnCours] = useState(false); // État pour vérifier si le timer est en cours\n  const [premierClic, setPremierClic] = useState(true);  // Pour gérer le premier clic (lancer le timer)\n  const [nomUtilisateur, setNomUtilisateur] = useState(null);  // Nom du joueur choisi\n  const [utilisateurs, setUtilisateurs] = useState([]);  // Liste des utilisateurs récupérée depuis l'API\n  const [niveauActuel, setNiveauActuel] = useState(niveauxDeDifficulte.facile); // Niveau de difficulté par défaut\n\n  // Utilisation de useEffect pour fetcher les utilisateurs de l'API\n  useEffect(() => {\n    // Fonction asynchrone pour récupérer les utilisateurs via l'API\n    const recupererUtilisateurs = async () => {\n      try {\n        // Appel à l'API JSONPlaceholder pour récupérer la liste des utilisateurs\n        const reponse = await fetch('https://jsonplaceholder.typicode.com/users');\n        // Convertir la réponse en format JSON\n        const donnees = await reponse.json();\n        // Stocker les données des utilisateurs dans l'état 'utilisateurs'\n        setUtilisateurs(donnees);\n      } catch (erreur) {\n        // Si une erreur survient, afficher un message d'erreur\n        console.error('Erreur lors de la récupération des utilisateurs:', erreur);\n      }\n    };\n    recupererUtilisateurs();\n  });\n\n  const initialiserGrille = () => {\n    const taille = niveauActuel.taille;  // Taille de la grille selon le niveau\n    const nouvelleGrille = Array(taille).fill(null).map(() => Array(taille).fill({\n      aMine: false,\n      estOuverte: false,\n      estDrapeau: false,\n      minesAdjacentes: 0\n    }));\n\n    // Placer les mines de manière aléatoire sur la grille\n    let minesPlacees = 0;\n    while (minesPlacees < niveauActuel.mines) {\n      const ligne = Math.floor(Math.random() * taille);\n      const colonne = Math.floor(Math.random() * taille);\n\n      if (!nouvelleGrille[ligne][colonne].aMine) {\n        nouvelleGrille[ligne][colonne].aMine = true;\n        minesPlacees++;\n      }\n    }\n    // Calculer le nombre de mines adjacentes pour chaque cellule\n    for (let ligne = 0; ligne < taille; ligne++) {\n      for (let colonne = 0; colonne < taille; colonne++) {\n        if (!nouvelleGrille[ligne][colonne].aMine) {\n          let minesAdjacentes = 0;\n          for (let i = -1; i <= 1; i++) {\n            for (let j = -1; j <= 1; j++) {\n              const l = ligne + i;\n              const c = colonne + j;\n              if (l >= 0 && l < taille && c >= 0 && c < taille && nouvelleGrille[l][c].aMine) {\n                minesAdjacentes++;\n              }\n            }\n          }\n          nouvelleGrille[ligne][colonne].minesAdjacentes = minesAdjacentes;\n        }\n      }\n    }\n\n    // Mettre à jour l'état de la grille\n    setGrille(nouvelleGrille);\n    setMinesRestantes(niveauActuel.mines);  // Réinitialiser le nombre de mines restantes\n  };\n\n  // Fonction pour démarrer le timer\n  const demarrerMinuteur = () => {\n    let compte = 0;\n    const intervalle = setInterval(() => {\n      if (!minuteurEnCours) clearInterval(intervalle);  // Si le timer ne doit plus tourner, on arrête l'intervalle\n      else setMinuteur(compte++);  // Incrémenter le timer chaque seconde\n    }, 1000);\n  };\n\n  // Fonction qui gère le clic sur une cellule de la grille\n  const gererClicCellule = (ligne, colonne) => {\n    // Si la partie est terminée ou si la cellule est marquée avec un drapeau, ne rien faire\n    if (estPartieTerminee || grille[ligne][colonne].estDrapeau) return;\n\n    // Si c'est le premier clic, démarrer le timer\n    if (premierClic) {\n      setMinuteurEnCours(true);\n      demarrerMinuteur();\n      setPremierClic(false);  // Désactiver le premier clic\n    }\n\n    const nouvelleGrille = [...grille]; // Créer une copie de la grille\n    if (nouvelleGrille[ligne][colonne].aMine) {  // Si la cellule contient une mine\n      setEstPartieTerminee(true);  // La partie est terminée\n      setMinuteurEnCours(false);  // Arrêter le timer\n    } else {\n      ouvrirCellule(nouvelleGrille, ligne, colonne);  // Ouvrir la cellule\n    }\n\n    // Mettre à jour la grille\n    setGrille(nouvelleGrille);\n  };\n\n  // Fonction pour ouvrir une cellule et ses voisines si elle n'a pas de mines adjacentes\n  const ouvrirCellule = (nouvelleGrille, ligne, colonne) => {\n    if (ligne < 0 || ligne >= niveauActuel.taille || colonne < 0 || colonne >= niveauActuel.taille) return;\n    if (nouvelleGrille[ligne][colonne].estOuverte || nouvelleGrille[ligne][colonne].estDrapeau) return;\n\n    nouvelleGrille[ligne][colonne].estOuverte = true;\n    if (nouvelleGrille[ligne][colonne].minesAdjacentes === 0) {\n      // Ouvrir les cellules adjacentes si la cellule courante n'a pas de mines adjacentes\n      for (let i = -1; i <= 1; i++) {\n        for (let j = -1; j <= 1; j++) {\n          ouvrirCellule(nouvelleGrille, ligne + i, colonne + j);\n        }\n      }\n    }\n  };\n\n  // Fonction pour gérer le placement des drapeaux\n  const gererDrapeau = (ligne, colonne) => {\n    if (grille[ligne][colonne].estOuverte) return; // Si la cellule est déjà ouverte, ne pas permettre de poser un drapeau\n    const nouvelleGrille = [...grille];\n    nouvelleGrille[ligne][colonne].estDrapeau = !nouvelleGrille[ligne][colonne].estDrapeau;  // Alterner l'état du drapeau\n    setGrille(nouvelleGrille);\n    setMinesRestantes(prev => prev + (nouvelleGrille[ligne][colonne].estDrapeau ? -1 : 1));  // Réajuster le nombre de mines restantes\n  };\n\n  // Fonction pour changer de niveau\n  const gererChangementNiveau = (niveau) => {\n    setNiveauActuel(niveauxDeDifficulte[niveau]);  // Mettre à jour le niveau de difficulté\n    setEstPartieTerminee(false);  // Réinitialiser l'état du jeu\n    setMinuteurEnCours(false);  // Arrêter le timer\n    setMinuteur(0);  // Réinitialiser le timer\n    setPremierClic(true);  // Réactiver le premier clic\n  };\n\n  // Fonction pour vérifier si le joueur a gagné\n  const gererVictoire = () => {\n    if (!estPartieTerminee) {\n      alert('Bravo, vous avez gagné en ' + minuteur + ' secondes!');  // Afficher un message de victoire\n      const utilisateurChoisi = prompt('Entrez votre nom parmi les utilisateurs: ' + utilisateurs.map(user => user.name).join(', '));\n      setNomUtilisateur(utilisateurChoisi);  // Enregistrer le nom du joueur\n    }\n  };\n\n  // Initialiser la grille lorsque le niveau change\n  useEffect(() => {\n    initialiserGrille();  // Appeler la fonction pour initialiser la grille\n  }, [niveauActuel]);  // Ce useEffect dépend de 'niveauActuel' et sera exécuté chaque fois que le niveau change\n\n  return (\n    <div>\n      <h1>Démineur</h1>\n      <div>\n        Niveau :\n        <button onClick={() => gererChangementNiveau('facile')}>Facile</button>\n        <button onClick={() => gererChangementNiveau('intermédiaire')}>Intermédiaire</button>\n        <button onClick={() => gererChangementNiveau('expert')}>Expert</button>\n      </div>\n      <Minuteur minuteur={minuteur} />  {/* Afficher le timer }\n      <Grille grille={grille} gererClicCellule={gererClicCellule} gererDrapeau={gererDrapeau} /> {/* Afficher la grille }\n      <CompteurDrapeaux minesRestantes={minesRestantes} /> {/* Afficher le compteur de mines restantes }\n      <div>{estPartieTerminee && <div>Partie terminée. Vous avez perdu.</div>}</div>\n      {nomUtilisateur && <ChoixNomUtilisateur nomUtilisateur={nomUtilisateur} />} {/* Afficher le nom du joueur }\n      {!estPartieTerminee && grille.flat().every(cell => cell.estOuverte || cell.aMine) && gererVictoire()} {/* Vérifier si toutes les cellules sans mine sont ouvertes }\n    </div>\n  );\n}\n\nexport default App;\n */\n\n// Demineur.tsx\n/*  import React, { useState } from 'react';\nimport { Minuteur } from './Minuteur';\nimport { Grille, Cellule } from './Grille';\nimport { CompteurDrapeaux } from './CompteurDrapeaux';\nimport { ChoixNomUtilisateur } from './ChoixNomUtilisateur';\n\nexport function Demineur() {\n  const niveauxDeDifficulte = {\n    facile: { taille: 8, mines: 10 },\n    intermediaire: { taille: 16, mines: 40 },\n    expert: { taille: 24, mines: 99 },\n  };\n\n  const [grille, setGrille] = useState<Cellule[][]>([]); // Correction ici\n  const [estPartieTerminee, setEstPartieTerminee] = useState(false);\n  const [minesRestantes, setMinesRestantes] = useState<number>(10);\n  const [minuteur, setMinuteur] = useState<number>(0);\n  const [minuteurEnCours, setMinuteurEnCours] = useState(false);\n  const [premierClic, setPremierClic] = useState(true);\n  const [nomUtilisateur, setNomUtilisateur] = useState<string | null>(null);\n  const [niveauActuel, setNiveauActuel] = useState(niveauxDeDifficulte.facile);\n  const [message, setMessage] = useState<string | null>(null);\n\n  // Initialiser la grille\n  const initialiserGrille = () => {\n    const taille = niveauActuel.taille;\n    const nouvelleGrille: Cellule[][] = Array(taille)\n      .fill(null)\n      .map(() =>\n        Array(taille).fill({\n          aMine: false,\n          estOuverte: false,\n          estDrapeau: false,\n          minesAdjacentes: 0,\n        })\n      );\n\n    let minesPlacees = 0;\n    while (minesPlacees < niveauActuel.mines) {\n      const ligne = Math.floor(Math.random() * taille);\n      const colonne = Math.floor(Math.random() * taille);\n\n      if (!nouvelleGrille[ligne][colonne].aMine) {\n        nouvelleGrille[ligne][colonne] = { ...nouvelleGrille[ligne][colonne], aMine: true };\n        minesPlacees++;\n      }\n    }\n\n    for (let ligne = 0; ligne < taille; ligne++) {\n      for (let colonne = 0; colonne < taille; colonne++) {\n        if (!nouvelleGrille[ligne][colonne].aMine) {\n          let minesAdjacentes = 0;\n          for (let i = -1; i <= 1; i++) {\n            for (let j = -1; j <= 1; j++) {\n              const l = ligne + i;\n              const c = colonne + j;\n              if (\n                l >= 0 &&\n                l < taille &&\n                c >= 0 &&\n                c < taille &&\n                nouvelleGrille[l][c].aMine\n              ) {\n                minesAdjacentes++;\n              }\n            }\n          }\n          nouvelleGrille[ligne][colonne] = { ...nouvelleGrille[ligne][colonne], minesAdjacentes };\n        }\n      }\n    }\n\n    setGrille(nouvelleGrille);\n    setMinesRestantes(niveauActuel.mines);\n  };\n\n  // Gérer le clic sur une cellule\n  const gererClicCellule = (ligne: number, colonne: number) => {\n    if (estPartieTerminee || grille[ligne][colonne].estDrapeau) return;\n\n    if (premierClic) {\n      setMinuteurEnCours(true);\n      setPremierClic(false);\n    }\n\n    const nouvelleGrille = [...grille];\n    if (nouvelleGrille[ligne][colonne].aMine) {\n      setEstPartieTerminee(true);\n      setMinuteurEnCours(false);\n      setMessage('Partie terminée. Vous avez perdu.');\n    } else {\n      ouvrirCellule(nouvelleGrille, ligne, colonne);\n    }\n\n    setGrille(nouvelleGrille);\n  };\n\n  const ouvrirCellule = (nouvelleGrille: Cellule[][], ligne: number, colonne: number) => {\n    if (\n      ligne < 0 ||\n      ligne >= niveauActuel.taille ||\n      colonne < 0 ||\n      colonne >= niveauActuel.taille\n    )\n      return;\n    if (nouvelleGrille[ligne][colonne].estOuverte || nouvelleGrille[ligne][colonne].estDrapeau)\n      return;\n\n    nouvelleGrille[ligne][colonne].estOuverte = true;\n    if (nouvelleGrille[ligne][colonne].minesAdjacentes === 0) {\n      for (let i = -1; i <= 1; i++) {\n        for (let j = -1; j <= 1; j++) {\n          ouvrirCellule(nouvelleGrille, ligne + i, colonne + j);\n        }\n      }\n    }\n  };\n\n  // Gérer le placement des drapeaux\n  const gererDrapeau = (ligne: number, colonne: number) => {\n    if (grille[ligne][colonne].estOuverte) return;\n    const nouvelleGrille = [...grille];\n    nouvelleGrille[ligne][colonne] = {\n      ...nouvelleGrille[ligne][colonne],\n      estDrapeau: !nouvelleGrille[ligne][colonne].estDrapeau,\n    };\n    setGrille(nouvelleGrille);\n    setMinesRestantes((prev) => prev + (nouvelleGrille[ligne][colonne].estDrapeau ? -1 : 1));\n  };\n\n  // Gérer le changement de niveau\n  const gererChangementNiveau = (niveau: keyof typeof niveauxDeDifficulte) => {\n    setNiveauActuel(niveauxDeDifficulte[niveau]);\n    setEstPartieTerminee(false);\n    setMinuteurEnCours(false);\n    setMinuteur(0);\n    setPremierClic(true);\n    setMessage(null);\n    initialiserGrille();\n  };\n\n  return (\n    <div className=\"container text-center mt-4\">\n      <h1 className=\"mb-4\">Démineur</h1>\n      <div className=\"mb-3\">\n        Niveau :\n        <button className=\"btn btn-primary mx-2\" onClick={() => gererChangementNiveau('facile')}>\n          Facile\n        </button>\n        <button className=\"btn btn-secondary mx-2\" onClick={() => gererChangementNiveau('intermediaire')}>\n          Intermédiaire\n        </button>\n        <button className=\"btn btn-danger mx-2\" onClick={() => gererChangementNiveau('expert')}>\n          Expert\n        </button>\n      </div>\n      <Minuteur minuteur={minuteur} />\n      <Grille grille={grille} gererClicCellule={gererClicCellule} gererDrapeau={gererDrapeau} />\n      <CompteurDrapeaux minesRestantes={minesRestantes} />\n      {message && <div className=\"alert alert-warning mt-3\">{message}</div>}\n      {nomUtilisateur && <ChoixNomUtilisateur nomUtilisateur={nomUtilisateur} />}\n    </div>\n  );\n}\n  */\nimport React, { useState, useEffect } from 'react';\nimport { Grille } from './Grille';\nimport { CompteurDrapeaux } from './CompteurDrapeaux';\nimport { HorlogeNumerique } from './HorlogeNumerique';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Demineur() {\n  _s();\n  const niveauxDeDifficulte = {\n    facile: {\n      taille: 8,\n      mines: 10\n    },\n    intermediaire: {\n      taille: 16,\n      mines: 40\n    },\n    expert: {\n      taille: 24,\n      mines: 99\n    }\n  };\n  const [grille, setGrille] = useState([]);\n  const [estPartieTerminee, setEstPartieTerminee] = useState(false);\n  const [minesRestantes, setMinesRestantes] = useState(10);\n  const [premierClic, setPremierClic] = useState(true);\n  //const [nomUtilisateur, setNomUtilisateur] = useState<string | null>(null);\n  const [niveauActuel, setNiveauActuel] = useState(niveauxDeDifficulte.facile);\n  const [message, setMessage] = useState(null);\n  const [utilisateurs, setUtilisateurs] = useState([]);\n  const [temps, setTemps] = useState(0); // Temps écoulé en secondes\n  const [intervalId, setIntervalId] = useState(null);\n  const demarrerHorloge = () => {\n    if (intervalId) return;\n    const id = setInterval(() => {\n      setTemps(prevTemps => prevTemps + 1);\n    }, 1000);\n    setIntervalId(id);\n  };\n  const arreterHorloge = () => {\n    if (intervalId) {\n      clearInterval(intervalId);\n      setIntervalId(null);\n    }\n  };\n  const initialiserGrille = () => {\n    const taille = niveauActuel.taille;\n    const nouvelleGrille = Array(taille).fill(null).map(() => Array(taille).fill({\n      aMine: false,\n      estOuverte: false,\n      estDrapeau: false,\n      minesAdjacentes: 0\n    }));\n    let minesPlacees = 0;\n    while (minesPlacees < niveauActuel.mines) {\n      const ligne = Math.floor(Math.random() * taille);\n      const colonne = Math.floor(Math.random() * taille);\n      if (!nouvelleGrille[ligne][colonne].aMine) {\n        nouvelleGrille[ligne][colonne] = {\n          ...nouvelleGrille[ligne][colonne],\n          aMine: true\n        };\n        minesPlacees++;\n      }\n    }\n    for (let ligne = 0; ligne < taille; ligne++) {\n      for (let colonne = 0; colonne < taille; colonne++) {\n        if (!nouvelleGrille[ligne][colonne].aMine) {\n          let minesAdjacentes = 0;\n          for (let i = -1; i <= 1; i++) {\n            for (let j = -1; j <= 1; j++) {\n              const l = ligne + i;\n              const c = colonne + j;\n              if (l >= 0 && l < taille && c >= 0 && c < taille && nouvelleGrille[l][c].aMine) {\n                minesAdjacentes++;\n              }\n            }\n          }\n          nouvelleGrille[ligne][colonne] = {\n            ...nouvelleGrille[ligne][colonne],\n            minesAdjacentes\n          };\n        }\n      }\n    }\n    setGrille(nouvelleGrille);\n    setMinesRestantes(niveauActuel.mines);\n    setTemps(0); // Réinitialiser le temps\n    arreterHorloge();\n  };\n  const gererClicCellule = (ligne, colonne) => {\n    if (estPartieTerminee || grille[ligne][colonne].estDrapeau) return;\n    if (premierClic) {\n      if (grille[ligne][colonne].aMine) {\n        initialiserGrille();\n        return; // On ne fait rien d'autre, car la grille est réinitialisée\n      }\n      setPremierClic(false);\n      demarrerHorloge();\n    }\n    const nouvelleGrille = [...grille];\n    const cellule = nouvelleGrille[ligne][colonne];\n    if (cellule.aMine) {\n      setEstPartieTerminee(true);\n      arreterHorloge();\n      setMessage('Partie terminée. Vous avez perdu.');\n    } else {\n      ouvrirCellule(nouvelleGrille, ligne, colonne);\n    }\n    cellule.estOuverte = true;\n    setGrille(nouvelleGrille);\n    if (aGagne()) {\n      setEstPartieTerminee(true);\n      arreterHorloge();\n    }\n  };\n  const ouvrirCellule = (nouvelleGrille, ligne, colonne) => {\n    if (ligne < 0 || ligne >= niveauActuel.taille || colonne < 0 || colonne >= niveauActuel.taille) return;\n    if (nouvelleGrille[ligne][colonne].estOuverte || nouvelleGrille[ligne][colonne].estDrapeau) return;\n    nouvelleGrille[ligne][colonne].estOuverte = true;\n    if (nouvelleGrille[ligne][colonne].minesAdjacentes === 0) {\n      for (let i = -1; i <= 1; i++) {\n        for (let j = -1; j <= 1; j++) {\n          ouvrirCellule(nouvelleGrille, ligne + i, colonne + j);\n        }\n      }\n    }\n  };\n  const gererDrapeau = (ligne, colonne) => {\n    setGrille(prevGrille => {\n      const nouvelleGrille = [...prevGrille];\n      const cellule = nouvelleGrille[ligne][colonne];\n      if (cellule.estDrapeau) {\n        // Si un drapeau est déjà placé, le retirer et ajouter une mine\n        setMinesRestantes(prev => prev + 1);\n      } else {\n        // Si aucun drapeau n'est placé, le mettre et soustraire une mine\n        setMinesRestantes(prev => prev - 1);\n      }\n      cellule.estDrapeau = !cellule.estDrapeau;\n      return nouvelleGrille;\n    });\n  };\n  const gererChangementNiveau = niveau => {\n    setNiveauActuel(niveauxDeDifficulte[niveau]);\n    setEstPartieTerminee(false);\n    //setMinuteurEnCours(false);\n    // setMinuteur(0);\n    setPremierClic(true);\n    setMessage(null);\n    initialiserGrille();\n  };\n  const aGagne = () => {\n    for (let i = 0; i < niveauActuel.taille; i++) {\n      for (let j = 0; j < niveauActuel.taille; j++) {\n        const cellule = grille[i][j];\n\n        // Vérifie si une cellule non minée n'est pas ouverte\n        if (!cellule.aMine && !cellule.estOuverte) {\n          return false;\n        }\n\n        // Vérifie si une mine n'a pas de drapeau\n        if (cellule.aMine && !cellule.estDrapeau) {\n          return false;\n        }\n      }\n    }\n    return true; // Toutes les cases respectent les conditions de victoire\n  };\n\n  // Utiliser useEffect pour fetcher les utilisateurs lorsque la partie est terminée\n  useEffect(() => {\n    if (estPartieTerminee) {\n      if (aGagne()) {\n        fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(data => {\n          setUtilisateurs(data);\n        });\n        setMessage('Vous avez gagné !');\n      }\n    }\n  }, [estPartieTerminee]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container text-center mt-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"mb-4\",\n      children: \"D\\xE9mineur\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 571,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [\"Niveau :\", /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mx-2\",\n        onClick: () => gererChangementNiveau('facile'),\n        children: \"Facile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary mx-2\",\n        onClick: () => gererChangementNiveau('intermediaire'),\n        children: \"Interm\\xE9diaire\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-danger mx-2\",\n        onClick: () => gererChangementNiveau('expert'),\n        children: \"Expert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 572,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HorlogeNumerique, {\n      temps: temps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 585,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-between mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Grille, {\n          grille: grille,\n          gererClicCellule: gererClicCellule,\n          gererDrapeau: gererDrapeau\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 588,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-list\",\n        children: estPartieTerminee && aGagne() && utilisateurs.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Choisissez votre nom d'utilisateur :\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 595,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"table\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Nom d'utilisateur\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 599,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 600,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 598,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 597,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: utilisateurs.map(utilisateur => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: utilisateur.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 606,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"radio\",\n                    value: utilisateur.name,\n                    name: \"nomUtilisateur\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 610,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 609,\n                  columnNumber: 23\n                }, this)]\n              }, utilisateur.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 605,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 603,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"tfoot\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: /*#__PURE__*/_jsxDEV(\"td\", {\n                  colSpan: 2,\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    children: \"Choisir\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 618,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 617,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 616,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 615,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 596,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 587,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CompteurDrapeaux, {\n      minesRestantes: minesRestantes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 628,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-warning mt-3\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 630,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 570,\n    columnNumber: 5\n  }, this);\n}\n_s(Demineur, \"lAcYonErx5ZSaEZVzZl1w6fVW+s=\");\n_c = Demineur;\nvar _c;\n$RefreshReg$(_c, \"Demineur\");","map":{"version":3,"names":["React","useState","useEffect","Grille","CompteurDrapeaux","HorlogeNumerique","jsxDEV","_jsxDEV","Demineur","_s","niveauxDeDifficulte","facile","taille","mines","intermediaire","expert","grille","setGrille","estPartieTerminee","setEstPartieTerminee","minesRestantes","setMinesRestantes","premierClic","setPremierClic","niveauActuel","setNiveauActuel","message","setMessage","utilisateurs","setUtilisateurs","temps","setTemps","intervalId","setIntervalId","demarrerHorloge","id","setInterval","prevTemps","arreterHorloge","clearInterval","initialiserGrille","nouvelleGrille","Array","fill","map","aMine","estOuverte","estDrapeau","minesAdjacentes","minesPlacees","ligne","Math","floor","random","colonne","i","j","l","c","gererClicCellule","cellule","ouvrirCellule","aGagne","gererDrapeau","prevGrille","prev","gererChangementNiveau","niveau","fetch","then","response","json","data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","utilisateur","name","type","value","colSpan","_c","$RefreshReg$"],"sources":["C:/Users/sameh/OneDrive/Documents/Desktop/Horloge2/travail22025/src/JeuxDemineur/Demineur.tsx"],"sourcesContent":["/*import React, { useState, useEffect } from 'react';\nimport Grille from './Grille';\nimport Minuteur from './Minuteur';\nimport CompteurDrapeaux from './CompteurDrapeaux';\nimport ChoixNomUtilisateur from './ChoixNomUtilisateur';\n\n// App est le composant principal du jeu Démineur\nexport function Demineur() {\n  // Définir les niveaux de difficulté du jeu\n  const niveauxDeDifficulte = {\n    facile: { taille: 8, mines: 10 },    // Facile : 8x8, 10 mines\n    intermédiaire: { taille: 16, mines: 40 }, // Intermédiaire : 16x16, 40 mines\n    expert: { taille: 24, mines: 99 },   // Expert : 24x24, 99 mines\n  };\n\n  // États pour stocker les différentes valeurs du jeu\n  const [grille, setGrille] = useState([]);         // Grille du jeu (où les cellules du démineur sont stockées)\n  const [estPartieTerminee, setEstPartieTerminee] = useState(false); // État pour vérifier si le jeu est terminé\n  const [minesRestantes, setMinesRestantes] = useState(10); // Mines restantes sur la grille\n  const [minuteur, setMinuteur] = useState(0);        // Compteur pour le temps de jeu\n  const [minuteurEnCours, setMinuteurEnCours] = useState(false); // État pour vérifier si le timer est en cours\n  const [premierClic, setPremierClic] = useState(true);  // Pour gérer le premier clic (lancer le timer)\n  const [nomUtilisateur, setNomUtilisateur] = useState(null);  // Nom du joueur choisi\n  const [utilisateurs, setUtilisateurs] = useState([]);  // Liste des utilisateurs récupérée depuis l'API\n  const [niveauActuel, setNiveauActuel] = useState(niveauxDeDifficulte.facile); // Niveau de difficulté par défaut\n\n  // Utilisation de useEffect pour fetcher les utilisateurs de l'API\n  useEffect(() => {\n    // Fonction asynchrone pour récupérer les utilisateurs via l'API\n    const recupererUtilisateurs = async () => {\n      try {\n        // Appel à l'API JSONPlaceholder pour récupérer la liste des utilisateurs\n        const reponse = await fetch('https://jsonplaceholder.typicode.com/users');\n        // Convertir la réponse en format JSON\n        const donnees = await reponse.json();\n        // Stocker les données des utilisateurs dans l'état 'utilisateurs'\n        setUtilisateurs(donnees);\n      } catch (erreur) {\n        // Si une erreur survient, afficher un message d'erreur\n        console.error('Erreur lors de la récupération des utilisateurs:', erreur);\n      }\n    };\n    recupererUtilisateurs();\n  });\n\n  const initialiserGrille = () => {\n    const taille = niveauActuel.taille;  // Taille de la grille selon le niveau\n    const nouvelleGrille = Array(taille).fill(null).map(() => Array(taille).fill({\n      aMine: false,\n      estOuverte: false,\n      estDrapeau: false,\n      minesAdjacentes: 0\n    }));\n\n    // Placer les mines de manière aléatoire sur la grille\n    let minesPlacees = 0;\n    while (minesPlacees < niveauActuel.mines) {\n      const ligne = Math.floor(Math.random() * taille);\n      const colonne = Math.floor(Math.random() * taille);\n\n      if (!nouvelleGrille[ligne][colonne].aMine) {\n        nouvelleGrille[ligne][colonne].aMine = true;\n        minesPlacees++;\n      }\n    }\n    // Calculer le nombre de mines adjacentes pour chaque cellule\n    for (let ligne = 0; ligne < taille; ligne++) {\n      for (let colonne = 0; colonne < taille; colonne++) {\n        if (!nouvelleGrille[ligne][colonne].aMine) {\n          let minesAdjacentes = 0;\n          for (let i = -1; i <= 1; i++) {\n            for (let j = -1; j <= 1; j++) {\n              const l = ligne + i;\n              const c = colonne + j;\n              if (l >= 0 && l < taille && c >= 0 && c < taille && nouvelleGrille[l][c].aMine) {\n                minesAdjacentes++;\n              }\n            }\n          }\n          nouvelleGrille[ligne][colonne].minesAdjacentes = minesAdjacentes;\n        }\n      }\n    }\n\n    // Mettre à jour l'état de la grille\n    setGrille(nouvelleGrille);\n    setMinesRestantes(niveauActuel.mines);  // Réinitialiser le nombre de mines restantes\n  };\n\n  // Fonction pour démarrer le timer\n  const demarrerMinuteur = () => {\n    let compte = 0;\n    const intervalle = setInterval(() => {\n      if (!minuteurEnCours) clearInterval(intervalle);  // Si le timer ne doit plus tourner, on arrête l'intervalle\n      else setMinuteur(compte++);  // Incrémenter le timer chaque seconde\n    }, 1000);\n  };\n\n  // Fonction qui gère le clic sur une cellule de la grille\n  const gererClicCellule = (ligne, colonne) => {\n    // Si la partie est terminée ou si la cellule est marquée avec un drapeau, ne rien faire\n    if (estPartieTerminee || grille[ligne][colonne].estDrapeau) return;\n\n    // Si c'est le premier clic, démarrer le timer\n    if (premierClic) {\n      setMinuteurEnCours(true);\n      demarrerMinuteur();\n      setPremierClic(false);  // Désactiver le premier clic\n    }\n\n    const nouvelleGrille = [...grille]; // Créer une copie de la grille\n    if (nouvelleGrille[ligne][colonne].aMine) {  // Si la cellule contient une mine\n      setEstPartieTerminee(true);  // La partie est terminée\n      setMinuteurEnCours(false);  // Arrêter le timer\n    } else {\n      ouvrirCellule(nouvelleGrille, ligne, colonne);  // Ouvrir la cellule\n    }\n\n    // Mettre à jour la grille\n    setGrille(nouvelleGrille);\n  };\n\n  // Fonction pour ouvrir une cellule et ses voisines si elle n'a pas de mines adjacentes\n  const ouvrirCellule = (nouvelleGrille, ligne, colonne) => {\n    if (ligne < 0 || ligne >= niveauActuel.taille || colonne < 0 || colonne >= niveauActuel.taille) return;\n    if (nouvelleGrille[ligne][colonne].estOuverte || nouvelleGrille[ligne][colonne].estDrapeau) return;\n\n    nouvelleGrille[ligne][colonne].estOuverte = true;\n    if (nouvelleGrille[ligne][colonne].minesAdjacentes === 0) {\n      // Ouvrir les cellules adjacentes si la cellule courante n'a pas de mines adjacentes\n      for (let i = -1; i <= 1; i++) {\n        for (let j = -1; j <= 1; j++) {\n          ouvrirCellule(nouvelleGrille, ligne + i, colonne + j);\n        }\n      }\n    }\n  };\n\n  // Fonction pour gérer le placement des drapeaux\n  const gererDrapeau = (ligne, colonne) => {\n    if (grille[ligne][colonne].estOuverte) return; // Si la cellule est déjà ouverte, ne pas permettre de poser un drapeau\n    const nouvelleGrille = [...grille];\n    nouvelleGrille[ligne][colonne].estDrapeau = !nouvelleGrille[ligne][colonne].estDrapeau;  // Alterner l'état du drapeau\n    setGrille(nouvelleGrille);\n    setMinesRestantes(prev => prev + (nouvelleGrille[ligne][colonne].estDrapeau ? -1 : 1));  // Réajuster le nombre de mines restantes\n  };\n\n  // Fonction pour changer de niveau\n  const gererChangementNiveau = (niveau) => {\n    setNiveauActuel(niveauxDeDifficulte[niveau]);  // Mettre à jour le niveau de difficulté\n    setEstPartieTerminee(false);  // Réinitialiser l'état du jeu\n    setMinuteurEnCours(false);  // Arrêter le timer\n    setMinuteur(0);  // Réinitialiser le timer\n    setPremierClic(true);  // Réactiver le premier clic\n  };\n\n  // Fonction pour vérifier si le joueur a gagné\n  const gererVictoire = () => {\n    if (!estPartieTerminee) {\n      alert('Bravo, vous avez gagné en ' + minuteur + ' secondes!');  // Afficher un message de victoire\n      const utilisateurChoisi = prompt('Entrez votre nom parmi les utilisateurs: ' + utilisateurs.map(user => user.name).join(', '));\n      setNomUtilisateur(utilisateurChoisi);  // Enregistrer le nom du joueur\n    }\n  };\n\n  // Initialiser la grille lorsque le niveau change\n  useEffect(() => {\n    initialiserGrille();  // Appeler la fonction pour initialiser la grille\n  }, [niveauActuel]);  // Ce useEffect dépend de 'niveauActuel' et sera exécuté chaque fois que le niveau change\n\n  return (\n    <div>\n      <h1>Démineur</h1>\n      <div>\n        Niveau :\n        <button onClick={() => gererChangementNiveau('facile')}>Facile</button>\n        <button onClick={() => gererChangementNiveau('intermédiaire')}>Intermédiaire</button>\n        <button onClick={() => gererChangementNiveau('expert')}>Expert</button>\n      </div>\n      <Minuteur minuteur={minuteur} />  {/* Afficher le timer }\n      <Grille grille={grille} gererClicCellule={gererClicCellule} gererDrapeau={gererDrapeau} /> {/* Afficher la grille }\n      <CompteurDrapeaux minesRestantes={minesRestantes} /> {/* Afficher le compteur de mines restantes }\n      <div>{estPartieTerminee && <div>Partie terminée. Vous avez perdu.</div>}</div>\n      {nomUtilisateur && <ChoixNomUtilisateur nomUtilisateur={nomUtilisateur} />} {/* Afficher le nom du joueur }\n      {!estPartieTerminee && grille.flat().every(cell => cell.estOuverte || cell.aMine) && gererVictoire()} {/* Vérifier si toutes les cellules sans mine sont ouvertes }\n    </div>\n  );\n}\n\nexport default App;\n */\n\n// Demineur.tsx\n/*  import React, { useState } from 'react';\nimport { Minuteur } from './Minuteur';\nimport { Grille, Cellule } from './Grille';\nimport { CompteurDrapeaux } from './CompteurDrapeaux';\nimport { ChoixNomUtilisateur } from './ChoixNomUtilisateur';\n\nexport function Demineur() {\n  const niveauxDeDifficulte = {\n    facile: { taille: 8, mines: 10 },\n    intermediaire: { taille: 16, mines: 40 },\n    expert: { taille: 24, mines: 99 },\n  };\n\n  const [grille, setGrille] = useState<Cellule[][]>([]); // Correction ici\n  const [estPartieTerminee, setEstPartieTerminee] = useState(false);\n  const [minesRestantes, setMinesRestantes] = useState<number>(10);\n  const [minuteur, setMinuteur] = useState<number>(0);\n  const [minuteurEnCours, setMinuteurEnCours] = useState(false);\n  const [premierClic, setPremierClic] = useState(true);\n  const [nomUtilisateur, setNomUtilisateur] = useState<string | null>(null);\n  const [niveauActuel, setNiveauActuel] = useState(niveauxDeDifficulte.facile);\n  const [message, setMessage] = useState<string | null>(null);\n\n  // Initialiser la grille\n  const initialiserGrille = () => {\n    const taille = niveauActuel.taille;\n    const nouvelleGrille: Cellule[][] = Array(taille)\n      .fill(null)\n      .map(() =>\n        Array(taille).fill({\n          aMine: false,\n          estOuverte: false,\n          estDrapeau: false,\n          minesAdjacentes: 0,\n        })\n      );\n\n    let minesPlacees = 0;\n    while (minesPlacees < niveauActuel.mines) {\n      const ligne = Math.floor(Math.random() * taille);\n      const colonne = Math.floor(Math.random() * taille);\n\n      if (!nouvelleGrille[ligne][colonne].aMine) {\n        nouvelleGrille[ligne][colonne] = { ...nouvelleGrille[ligne][colonne], aMine: true };\n        minesPlacees++;\n      }\n    }\n\n    for (let ligne = 0; ligne < taille; ligne++) {\n      for (let colonne = 0; colonne < taille; colonne++) {\n        if (!nouvelleGrille[ligne][colonne].aMine) {\n          let minesAdjacentes = 0;\n          for (let i = -1; i <= 1; i++) {\n            for (let j = -1; j <= 1; j++) {\n              const l = ligne + i;\n              const c = colonne + j;\n              if (\n                l >= 0 &&\n                l < taille &&\n                c >= 0 &&\n                c < taille &&\n                nouvelleGrille[l][c].aMine\n              ) {\n                minesAdjacentes++;\n              }\n            }\n          }\n          nouvelleGrille[ligne][colonne] = { ...nouvelleGrille[ligne][colonne], minesAdjacentes };\n        }\n      }\n    }\n\n    setGrille(nouvelleGrille);\n    setMinesRestantes(niveauActuel.mines);\n  };\n\n  // Gérer le clic sur une cellule\n  const gererClicCellule = (ligne: number, colonne: number) => {\n    if (estPartieTerminee || grille[ligne][colonne].estDrapeau) return;\n\n    if (premierClic) {\n      setMinuteurEnCours(true);\n      setPremierClic(false);\n    }\n\n    const nouvelleGrille = [...grille];\n    if (nouvelleGrille[ligne][colonne].aMine) {\n      setEstPartieTerminee(true);\n      setMinuteurEnCours(false);\n      setMessage('Partie terminée. Vous avez perdu.');\n    } else {\n      ouvrirCellule(nouvelleGrille, ligne, colonne);\n    }\n\n    setGrille(nouvelleGrille);\n  };\n\n  const ouvrirCellule = (nouvelleGrille: Cellule[][], ligne: number, colonne: number) => {\n    if (\n      ligne < 0 ||\n      ligne >= niveauActuel.taille ||\n      colonne < 0 ||\n      colonne >= niveauActuel.taille\n    )\n      return;\n    if (nouvelleGrille[ligne][colonne].estOuverte || nouvelleGrille[ligne][colonne].estDrapeau)\n      return;\n\n    nouvelleGrille[ligne][colonne].estOuverte = true;\n    if (nouvelleGrille[ligne][colonne].minesAdjacentes === 0) {\n      for (let i = -1; i <= 1; i++) {\n        for (let j = -1; j <= 1; j++) {\n          ouvrirCellule(nouvelleGrille, ligne + i, colonne + j);\n        }\n      }\n    }\n  };\n\n  // Gérer le placement des drapeaux\n  const gererDrapeau = (ligne: number, colonne: number) => {\n    if (grille[ligne][colonne].estOuverte) return;\n    const nouvelleGrille = [...grille];\n    nouvelleGrille[ligne][colonne] = {\n      ...nouvelleGrille[ligne][colonne],\n      estDrapeau: !nouvelleGrille[ligne][colonne].estDrapeau,\n    };\n    setGrille(nouvelleGrille);\n    setMinesRestantes((prev) => prev + (nouvelleGrille[ligne][colonne].estDrapeau ? -1 : 1));\n  };\n\n  // Gérer le changement de niveau\n  const gererChangementNiveau = (niveau: keyof typeof niveauxDeDifficulte) => {\n    setNiveauActuel(niveauxDeDifficulte[niveau]);\n    setEstPartieTerminee(false);\n    setMinuteurEnCours(false);\n    setMinuteur(0);\n    setPremierClic(true);\n    setMessage(null);\n    initialiserGrille();\n  };\n\n  return (\n    <div className=\"container text-center mt-4\">\n      <h1 className=\"mb-4\">Démineur</h1>\n      <div className=\"mb-3\">\n        Niveau :\n        <button className=\"btn btn-primary mx-2\" onClick={() => gererChangementNiveau('facile')}>\n          Facile\n        </button>\n        <button className=\"btn btn-secondary mx-2\" onClick={() => gererChangementNiveau('intermediaire')}>\n          Intermédiaire\n        </button>\n        <button className=\"btn btn-danger mx-2\" onClick={() => gererChangementNiveau('expert')}>\n          Expert\n        </button>\n      </div>\n      <Minuteur minuteur={minuteur} />\n      <Grille grille={grille} gererClicCellule={gererClicCellule} gererDrapeau={gererDrapeau} />\n      <CompteurDrapeaux minesRestantes={minesRestantes} />\n      {message && <div className=\"alert alert-warning mt-3\">{message}</div>}\n      {nomUtilisateur && <ChoixNomUtilisateur nomUtilisateur={nomUtilisateur} />}\n    </div>\n  );\n}\n  */\nimport React, { useState, useEffect } from 'react';\n\nimport { Grille, Cellule } from './Grille';\nimport { CompteurDrapeaux } from './CompteurDrapeaux';\nimport { ChoixNomUtilisateur } from './ChoixNomUtilisateur';\nimport { HorlogeNumerique } from './HorlogeNumerique';\n\nexport function Demineur() {\n  const niveauxDeDifficulte = {\n    facile: { taille: 8, mines: 10 },\n    intermediaire: { taille: 16, mines: 40 },\n    expert: { taille: 24, mines: 99 },\n  };\n\n  const [grille, setGrille] = useState<Cellule[][]>([]);\n  const [estPartieTerminee, setEstPartieTerminee] = useState(false);\n  const [minesRestantes, setMinesRestantes] = useState<number>(10);\n  const [premierClic, setPremierClic] = useState(true);\n  //const [nomUtilisateur, setNomUtilisateur] = useState<string | null>(null);\n  const [niveauActuel, setNiveauActuel] = useState(niveauxDeDifficulte.facile);\n  const [message, setMessage] = useState<string | null>(null);\n  const [utilisateurs, setUtilisateurs] = useState<any[]>([]);\n  const [temps, setTemps] = useState<number>(0); // Temps écoulé en secondes\n  const [intervalId, setIntervalId] = useState<NodeJS.Timeout | null>(null);\n\n  const demarrerHorloge = () => {\n    if (intervalId) return;\n\n    const id = setInterval(() => {\n      setTemps((prevTemps) => prevTemps + 1);\n    }, 1000);\n\n    setIntervalId(id);\n  };\n  const arreterHorloge = () => {\n    if (intervalId) {\n      clearInterval(intervalId);\n      setIntervalId(null);\n    }\n  };\n  const initialiserGrille = () => {\n    const taille = niveauActuel.taille;\n    const nouvelleGrille: Cellule[][] = Array(taille)\n      .fill(null)\n      .map(() =>\n        Array(taille).fill({\n          aMine: false,\n          estOuverte: false,\n          estDrapeau: false,\n          minesAdjacentes: 0,\n        })\n      );\n\n    let minesPlacees = 0;\n    while (minesPlacees < niveauActuel.mines) {\n      const ligne = Math.floor(Math.random() * taille);\n      const colonne = Math.floor(Math.random() * taille);\n\n      if (!nouvelleGrille[ligne][colonne].aMine) {\n        nouvelleGrille[ligne][colonne] = { ...nouvelleGrille[ligne][colonne], aMine: true };\n        minesPlacees++;\n      }\n    }\n\n    for (let ligne = 0; ligne < taille; ligne++) {\n      for (let colonne = 0; colonne < taille; colonne++) {\n        if (!nouvelleGrille[ligne][colonne].aMine) {\n          let minesAdjacentes = 0;\n          for (let i = -1; i <= 1; i++) {\n            for (let j = -1; j <= 1; j++) {\n              const l = ligne + i;\n              const c = colonne + j;\n              if (\n                l >= 0 &&\n                l < taille &&\n                c >= 0 &&\n                c < taille &&\n                nouvelleGrille[l][c].aMine\n              ) {\n                minesAdjacentes++;\n              }\n            }\n          }\n          nouvelleGrille[ligne][colonne] = { ...nouvelleGrille[ligne][colonne], minesAdjacentes };\n        }\n      }\n    }\n\n    setGrille(nouvelleGrille);\n    setMinesRestantes(niveauActuel.mines);\n    setTemps(0); // Réinitialiser le temps\n    arreterHorloge();\n  };\n\n  const gererClicCellule = (ligne: number, colonne: number) => {\n    if (estPartieTerminee || grille[ligne][colonne].estDrapeau) return;\n\n    if (premierClic) {\n      if (grille[ligne][colonne].aMine) {\n        initialiserGrille();\n        return; // On ne fait rien d'autre, car la grille est réinitialisée\n      }\n      setPremierClic(false);\n      demarrerHorloge();\n    }\n\n    const nouvelleGrille = [...grille];\n    const cellule =nouvelleGrille[ligne][colonne];\n\n    if (cellule.aMine) {\n      setEstPartieTerminee(true);\n  \n      arreterHorloge();\n \n      setMessage('Partie terminée. Vous avez perdu.');\n      \n    } else {\n      ouvrirCellule(nouvelleGrille, ligne, colonne);\n    }\n    cellule.estOuverte  = true;\n    setGrille(nouvelleGrille);\n    if (aGagne()) {\n      setEstPartieTerminee(true);\n      arreterHorloge();\n    }\n  };\n\n\n  const ouvrirCellule = (nouvelleGrille: Cellule[][], ligne: number, colonne: number) => {\n    if (\n      ligne < 0 ||\n      ligne >= niveauActuel.taille ||\n      colonne < 0 ||\n      colonne >= niveauActuel.taille\n    )\n      return;\n    if (nouvelleGrille[ligne][colonne].estOuverte || nouvelleGrille[ligne][colonne].estDrapeau)\n      return;\n\n    nouvelleGrille[ligne][colonne].estOuverte = true;\n    if (nouvelleGrille[ligne][colonne].minesAdjacentes === 0) {\n      for (let i = -1; i <= 1; i++) {\n        for (let j = -1; j <= 1; j++) {\n          ouvrirCellule(nouvelleGrille, ligne + i, colonne + j);\n        }\n      }\n    }\n  };\n\n  const gererDrapeau = (ligne: number, colonne: number) => {\n    setGrille((prevGrille) => {\n      const nouvelleGrille = [...prevGrille];\n      const cellule = nouvelleGrille[ligne][colonne];\n\n      if (cellule.estDrapeau) {\n        // Si un drapeau est déjà placé, le retirer et ajouter une mine\n        setMinesRestantes((prev) => prev + 1);\n      } else {\n        // Si aucun drapeau n'est placé, le mettre et soustraire une mine\n        setMinesRestantes((prev) => prev - 1);\n      }\n\n      cellule.estDrapeau = !cellule.estDrapeau;\n      return nouvelleGrille;\n    });\n  };\n  const gererChangementNiveau = (niveau: keyof typeof niveauxDeDifficulte) => {\n    setNiveauActuel(niveauxDeDifficulte[niveau]);\n    setEstPartieTerminee(false);\n    //setMinuteurEnCours(false);\n   // setMinuteur(0);\n    setPremierClic(true);\n    setMessage(null);\n    initialiserGrille();\n  };\n  const aGagne = () => {\n    for (let i = 0; i < niveauActuel.taille; i++) {\n      for (let j = 0; j < niveauActuel.taille; j++) {\n        const cellule = grille[i][j];\n  \n        // Vérifie si une cellule non minée n'est pas ouverte\n        if (!cellule.aMine && !cellule.estOuverte) {\n          return false;\n        }\n  \n        // Vérifie si une mine n'a pas de drapeau\n        if (cellule.aMine && !cellule.estDrapeau) {\n          return false;\n        }\n      }\n    }\n  \n    return true; // Toutes les cases respectent les conditions de victoire\n  };\n  \n\n  // Utiliser useEffect pour fetcher les utilisateurs lorsque la partie est terminée\n  useEffect(() => {\n    if (estPartieTerminee) {\n      if (aGagne()) {\n        fetch('https://jsonplaceholder.typicode.com/users')\n          .then((response) => response.json())\n          .then((data) => {\n            setUtilisateurs(data);\n          });\n        setMessage('Vous avez gagné !');\n      }\n    }\n  }, [estPartieTerminee]);\n\n  return (\n    <div className=\"container text-center mt-4\">\n      <h1 className=\"mb-4\">Démineur</h1>\n      <div className=\"mb-3\">\n        Niveau :\n        <button className=\"btn btn-primary mx-2\" onClick={() => gererChangementNiveau('facile')}>\n          Facile\n        </button>\n        <button className=\"btn btn-secondary mx-2\" onClick={() => gererChangementNiveau('intermediaire')}>\n          Intermédiaire\n        </button>\n        <button className=\"btn btn-danger mx-2\" onClick={() => gererChangementNiveau('expert')}>\n          Expert\n        </button>\n      </div>\n\n   <HorlogeNumerique temps={temps} />\n\n      <div className=\"d-flex justify-content-between mt-4\">\n        <div className=\"game-board\">\n          <Grille grille={grille} gererClicCellule={gererClicCellule} gererDrapeau={gererDrapeau} />\n        </div>\n\n        <div className=\"user-list\">\n          {estPartieTerminee && aGagne() && utilisateurs.length > 0 && (\n            <div className=\"mt-4\">\n              <h3>Choisissez votre nom d'utilisateur :</h3>\n              <table className=\"table\">\n                <thead>\n                  <tr>\n                    <th>Nom d'utilisateur</th>\n                    <th></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {utilisateurs.map((utilisateur) => (\n                    <tr key={utilisateur.id}>\n                      <td>\n                          {utilisateur.name}\n                      </td>\n                      <td>\n                        <input type='radio' value={utilisateur.name} name='nomUtilisateur'/>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n                <tfoot>\n                  <tr>\n                    <td colSpan={2}>\n                      <button>Choisir</button>\n                    </td>\n                  </tr>\n                </tfoot>\n              </table>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <CompteurDrapeaux minesRestantes={minesRestantes} />\n\n      {message && <div className=\"alert alert-warning mt-3\">{message}</div>}\n\n    </div>\n  );\n}\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}