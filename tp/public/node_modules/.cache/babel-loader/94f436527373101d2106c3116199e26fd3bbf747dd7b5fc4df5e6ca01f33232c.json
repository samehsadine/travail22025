{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sameh\\\\OneDrive\\\\Documents\\\\Desktop\\\\Horloge2\\\\travail22025\\\\src\\\\JeuxHorloge\\\\Horloge.tsx\",\n  _s = $RefreshSig$();\n/* import React, { useEffect, useState } from \"react\";\nimport PileHorloge from \"./PileHorloge\";\nimport { Deck } from \"./Deck\";\nimport { EtatApp, CarteH } from \"./Types\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst Horloge: React.FC = () => {\n  const [etat, setEtat] = useState<EtatApp>({\n    piles: Array(12).fill({ cartes: [] }),\n    pileCentrale: { cartes: [] },\n    paquet: [],\n    cartesRevelees: [],\n  });\n\n  // Utilisation de useEffect pour récupérer les cartes via l'API\n  useEffect(() => {\n    const initialiserJeu = async () => {\n      const nouveauPaquet = await Deck.creerPaquet();\n      setEtat((ancienEtat) => ({ ...ancienEtat, paquet: nouveauPaquet }));\n      distribuerCartes(nouveauPaquet);\n    };\n\n    initialiserJeu();\n  }, []); // Vide le tableau de dépendances pour que cela se fasse une seule fois au démarrage\n\n  const distribuerCartes = (paquet: string[]) => {\n    const piles: { cartes: CarteH[] }[] = Array(12).fill({ cartes: [] }).map(() => ({ cartes: [] }));\n    \n    const pileCentrale: { cartes: CarteH[] } = {\n      cartes: [\n        { code: paquet[0], image: `https://deckofcardsapi.com/static/img/${paquet[0]}.png` },\n      ],\n    };\n  \n    for (let i = 1; i < paquet.length; i++) {\n      const indexPile = i % 12;\n      piles[indexPile].cartes.push({\n        code: paquet[i],\n        image: `https://deckofcardsapi.com/static/img/${paquet[i]}.png`,\n      });\n    }\n  \n    setEtat((ancienEtat) => ({\n      ...ancienEtat,\n      piles,\n      pileCentrale,  // Correcte maintenant la structure de pileCentrale\n    }));\n  };\n  \n\n  function deplacerCarte(carte: CarteH, indexPile: number) {\n    const nouvellesPilesCopy = [...etat.piles]; // Crée une copie de l'état des piles\n\n    // Vérifie que l'élément à l'index spécifié est un tableau avant de l'itérer\n    if (Array.isArray(nouvellesPilesCopy[indexPile].cartes)) {\n      nouvellesPilesCopy[indexPile].cartes = [\n        ...nouvellesPilesCopy[indexPile].cartes,\n        carte,\n      ]; // Ajoute la carte à la pile\n    } else {\n      console.error(\"L'élément à l'index \" + indexPile + \" n'est pas un tableau.\");\n    }\n\n    // Met à jour l'état avec les nouvelles piles\n    setEtat((ancienEtat) => ({ ...ancienEtat, piles: nouvellesPilesCopy }));\n  }\n\n  return (\n    <div className=\"container text-center mt-5\">\n      <h1>Clock Solitaire</h1>\n      <div className=\"row justify-content-center mt-4\">\n        {etat.piles.map((pile, index) => (\n          <div className=\"col-2\" key={index}>\n            <PileHorloge\n              pile={pile.cartes} // Passe des objets CarteH ici\n              indexPile={index}\n              deplacerCarte={deplacerCarte}\n              centrale={false}\n            />\n          </div>\n        ))}\n        <div className=\"col-2\">\n          <PileHorloge\n            pile={etat.pileCentrale.cartes} // Passe des objets CarteH ici\n            indexPile={-1}\n            deplacerCarte={deplacerCarte}\n            centrale={true}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Horloge;\n */\n/* import React, { useState, useEffect } from \"react\";\nimport PileHorloge from \"./PileHorloge\";\nimport { Deck } from \"./Deck\";\nimport { EtatApp, CarteH, Pile } from \"./Types\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst Horloge: React.FC = () => {\n  const [etat, setEtat] = useState<EtatApp>({\n    piles: Array(12).fill(null).map(() => ({ cartes: [] as CarteH[] })), // 12 piles vides\n    pileCentrale: { cartes: [] as CarteH[] }, // Pile centrale vide\n    paquet: [], // Paquet vide\n    cartesRevelees: [], // Aucune carte révélée au départ\n  });\n\n  useEffect(() => {\n    const initialiserJeu = async () => {\n      const nouveauPaquet = await Deck.creerPaquet();\n      setEtat((ancienEtat) => ({ ...ancienEtat, paquet: nouveauPaquet }));\n      distribuerCartes(nouveauPaquet);\n    };\n\n\n    initialiserJeu();\n  }, []);\n\n\n  const distribuerCartes = (paquet: CarteH[]) => {\n    const piles = Array(12).fill(null).map(() => ({ cartes: [] as CarteH[] }));\n\n    console.log(paquet)\n\n    \n    const pileCentrale = { cartes: [] as CarteH[] };\n\n    let indexCarte = 0;\n\n    // Mélanger le paquet pour distribuer les cartes de manière aléatoire\n    paquet.sort(() => Math.random() - 0.5);\n\n\n    // Distribution des 12 piles en cercle (4 cartes par pile, face cachée)\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 12; j++) {\n        piles[j].cartes.push({\n          code: paquet[indexCarte].code, // Correct ici\n          image: paquet[indexCarte].image, // Utiliser directement l'image de l'objet\n          faceVisible: false, // Toutes les cartes commencent face cachée\n          value: paquet[indexCarte].value\n        });\n        indexCarte++;\n      }\n    }\n\n    console.log(piles)\n\n    // Distribution de la pile centrale (4 cartes, face cachée)\n    for (let i = 0; i < 4; i++) {\n      pileCentrale.cartes.push({\n        code: paquet[indexCarte].code, // Correct ici\n        image: paquet[indexCarte].image, // Utiliser l'image de l'objet\n        faceVisible: true,\n        value: paquet[indexCarte].value\n      });\n      indexCarte++;\n    }\n\n    // Choisir une carte au hasard parmi les 4 premières cartes de la pile centrale pour la rendre visible\n    const indexCarteVisible = Math.floor(Math.random() * 4);\n    pileCentrale.cartes[indexCarteVisible].faceVisible = true;\n\n    // Mettre à jour l'état avec les nouvelles piles, la pile centrale et la carte révélée\n    setEtat((ancienEtat) => ({\n      ...ancienEtat,\n      piles,\n      pileCentrale,\n      cartesRevelees: [pileCentrale.cartes[indexCarteVisible]], // Ajouter la carte révélée\n    }));\n  };\n\n  // Fonction pour déplacer une carte dans la pile correspondante\n  const deplacerCarte = (carte: CarteH, indexPile: number) => {\n    console.log(\"index de la pile est \"+indexPile);\n    const nouvellesPiles = [...etat.piles];\n\n    console.log('nouvellesPiles',nouvellesPiles);\n    \n    // Vérifier si la carte peut être déplacée (par exemple, si elle est face visible)\n /*    if (!carte.faceVisible) {\n      alert(`Vous ne pouvez pas déplacer une carte face cachée ! ${indexPile}`);\n      return;\n    } */\n\n// Ajouter la carte à la pile correspondante et la rendre face visible\n/* nouvellesPiles[indexPile].cartes.push({ ...carte, faceVisible: true });\n  // Mettre à jour l'état avec les nouvelles piles et la carte révélée\n setEtat((ancienEtat) => ({\n   ...ancienEtat,\n   piles: nouvellesPiles,\n   cartesRevelees: [...ancienEtat.cartesRevelees, carte], // Ajouter la carte aux cartes révélées\n }));\n};\n// Fonction pour obtenir l'index de la pile correspondant à une carte\nconst obtenirPileCorrespondante = (carte: CarteH) => {\n const valeurCarte = carte.code.split(\"_\")[0]; // Extrait la valeur de la carte (par exemple \"2\", \"JACK\", etc.)\n const rangs: { [key: string]: number } = {\n   \"2\": 2,\n   \"3\": 3,\n   \"4\": 4,\n   \"5\": 5,\n   \"6\": 6,\n   \"7\": 7,\n   \"8\": 8,\n   \"9\": 9,\n   \"10\": 10,\n   \"JACK\": 11,\n   \"QUEEN\": 0,\n   \"KING\": -1,\n   \"ACE\": 1,\n };\n return rangs[valeurCarte] ?? -1; // Retourne l'index de la pile correspondant au rang\n};\nreturn (\n <div className=\"container text-center mt-5\">\n   <h1>Clock Solitaire</h1>\n   <div\n     className=\"position-relative\"\n     style={{ width: \"500px\", height: \"500px\", margin: \"0 auto\" }}\n   >\n     {etat.piles.map((pile, index) => {\n       const angle = ((index -3)*30) * (Math.PI / 180);\n       const radius = 180;\n       const x = 250 + radius * Math.cos(angle);\n       const y = 250 + radius * Math.sin(angle);\n       return (\n         <div\n           key={index}\n           className=\"position-absolute\"\n           style={{\n             left: `${x}px`,\n             top: `${y}px`,\n             transform: \"translate(-50%, -50%)\",\n           }}\n         >\n           <PileHorloge\n             pile={pile.cartes}\n             indexPile={index}\n             deplacerCarte={deplacerCarte}\n             centrale={false}\n           />\n         </div>\n       );\n     })}\n     <div className=\"position-absolute top-50 start-50 translate-middle\">\n       <PileHorloge\n         pile={etat.pileCentrale.cartes}\n         indexPile={-1}\n         deplacerCarte={deplacerCarte}\n         centrale={true}\n       />\n     </div>\n   </div>\n </div>\n);\n};\nexport default Horloge; */\n\nimport React, { useState, useEffect } from \"react\";\nimport PileHorloge from \"./PileHorloge\";\nimport { Deck } from \"./Deck\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Horloge = () => {\n  _s();\n  const [etat, setEtat] = useState({\n    piles: Array(12).fill(null).map(() => ({\n      cartes: []\n    })),\n    // 12 piles vides\n    pileCentrale: {\n      cartes: []\n    },\n    // Pile centrale vide\n    paquet: [] // Paquet vide\n  });\n  useEffect(() => {\n    const initialiserJeu = async () => {\n      const nouveauPaquet = await Deck.creerPaquet();\n      distribuerCartes(nouveauPaquet);\n    };\n    initialiserJeu();\n  }, []);\n  const distribuerCartes = paquet => {\n    const piles = Array(12).fill(null).map(() => ({\n      cartes: []\n    }));\n    const pileCentrale = {\n      cartes: []\n    };\n    let indexCarte = 0;\n    paquet.sort(() => Math.random() - 0.5); // Mélanger\n\n    // Distribuer les 12 piles (4 cartes chacune)\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 12; j++) {\n        piles[j].cartes.push({\n          ...paquet[indexCarte],\n          faceVisible: false\n        });\n        indexCarte++;\n      }\n    }\n\n    // Distribuer la pile centrale (4 cartes, face cachée sauf la dernière)\n    for (let i = 0; i < 4; i++) {\n      pileCentrale.cartes.push({\n        ...paquet[indexCarte],\n        faceVisible: i === 3\n      });\n      indexCarte++;\n    }\n    setEtat({\n      piles,\n      pileCentrale,\n      paquet\n    });\n  };\n  const obtenirPileCorrespondante = carte => {\n    var _rangs$carte$value;\n    const rangs = {\n      \"2\": 2,\n      \"3\": 3,\n      \"4\": 4,\n      \"5\": 5,\n      \"6\": 6,\n      \"7\": 7,\n      \"8\": 8,\n      \"9\": 9,\n      \"10\": 10,\n      \"JACK\": 11,\n      \"QUEEN\": 0,\n      \"KING\": -1,\n      \"ACE\": 1\n    };\n    return (_rangs$carte$value = rangs[carte.value]) !== null && _rangs$carte$value !== void 0 ? _rangs$carte$value : -1;\n  };\n  const jouerTour = () => {\n    setEtat(ancienEtat => {\n      const nouvellesPiles = [...ancienEtat.piles];\n      const nouvellePileCentrale = {\n        ...ancienEtat.pileCentrale\n      };\n      if (nouvellePileCentrale.cartes.length === 0) return ancienEtat;\n      const carteVisible = nouvellePileCentrale.cartes.pop();\n      const indexDestination = obtenirPileCorrespondante(carteVisible);\n      if (indexDestination !== -1) {\n        nouvellesPiles[indexDestination].cartes.unshift({\n          ...carteVisible,\n          faceVisible: true\n        });\n        if (nouvellesPiles[indexDestination].cartes.length > 1) {\n          nouvellesPiles[indexDestination].cartes[nouvellesPiles[indexDestination].cartes.length - 2].faceVisible = false;\n        }\n      } else {\n        nouvellePileCentrale.cartes.unshift({\n          ...carteVisible,\n          faceVisible: true\n        });\n      }\n      return {\n        ...ancienEtat,\n        piles: nouvellesPiles,\n        pileCentrale: nouvellePileCentrale\n      };\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container text-center mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Clock Solitaire\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary mb-3\",\n      onClick: jouerTour,\n      children: \"Jouer un tour\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"position-relative\",\n      style: {\n        width: \"500px\",\n        height: \"500px\",\n        margin: \"0 auto\"\n      },\n      children: [etat.piles.map((pile, index) => {\n        const angle = (index - 3) * 30 * (Math.PI / 180);\n        const radius = 180;\n        const x = 250 + radius * Math.cos(angle);\n        const y = 250 + radius * Math.sin(angle);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"position-absolute\",\n          style: {\n            left: `${x}px`,\n            top: `${y}px`,\n            transform: \"translate(-50%, -50%)\"\n          },\n          children: /*#__PURE__*/_jsxDEV(PileHorloge, {\n            pile: pile.cartes,\n            indexPile: index,\n            deplacerCarte: jouerTour,\n            centrale: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"position-absolute top-50 start-50 translate-middle\",\n        children: /*#__PURE__*/_jsxDEV(PileHorloge, {\n          pile: etat.pileCentrale.cartes,\n          indexPile: -1,\n          deplacerCarte: jouerTour,\n          centrale: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 346,\n    columnNumber: 5\n  }, this);\n};\n_s(Horloge, \"5rpLsvJpV+hVM9Ml1RIOHxl03XY=\");\n_c = Horloge;\nexport default Horloge;\nvar _c;\n$RefreshReg$(_c, \"Horloge\");","map":{"version":3,"names":["React","useState","useEffect","PileHorloge","Deck","jsxDEV","_jsxDEV","Horloge","_s","etat","setEtat","piles","Array","fill","map","cartes","pileCentrale","paquet","initialiserJeu","nouveauPaquet","creerPaquet","distribuerCartes","indexCarte","sort","Math","random","i","j","push","faceVisible","obtenirPileCorrespondante","carte","_rangs$carte$value","rangs","value","jouerTour","ancienEtat","nouvellesPiles","nouvellePileCentrale","length","carteVisible","pop","indexDestination","unshift","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","width","height","margin","pile","index","angle","PI","radius","x","cos","y","sin","left","top","transform","indexPile","deplacerCarte","centrale","_c","$RefreshReg$"],"sources":["C:/Users/sameh/OneDrive/Documents/Desktop/Horloge2/travail22025/src/JeuxHorloge/Horloge.tsx"],"sourcesContent":["/* import React, { useEffect, useState } from \"react\";\nimport PileHorloge from \"./PileHorloge\";\nimport { Deck } from \"./Deck\";\nimport { EtatApp, CarteH } from \"./Types\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst Horloge: React.FC = () => {\n  const [etat, setEtat] = useState<EtatApp>({\n    piles: Array(12).fill({ cartes: [] }),\n    pileCentrale: { cartes: [] },\n    paquet: [],\n    cartesRevelees: [],\n  });\n\n  // Utilisation de useEffect pour récupérer les cartes via l'API\n  useEffect(() => {\n    const initialiserJeu = async () => {\n      const nouveauPaquet = await Deck.creerPaquet();\n      setEtat((ancienEtat) => ({ ...ancienEtat, paquet: nouveauPaquet }));\n      distribuerCartes(nouveauPaquet);\n    };\n\n    initialiserJeu();\n  }, []); // Vide le tableau de dépendances pour que cela se fasse une seule fois au démarrage\n\n  const distribuerCartes = (paquet: string[]) => {\n    const piles: { cartes: CarteH[] }[] = Array(12).fill({ cartes: [] }).map(() => ({ cartes: [] }));\n    \n    const pileCentrale: { cartes: CarteH[] } = {\n      cartes: [\n        { code: paquet[0], image: `https://deckofcardsapi.com/static/img/${paquet[0]}.png` },\n      ],\n    };\n  \n    for (let i = 1; i < paquet.length; i++) {\n      const indexPile = i % 12;\n      piles[indexPile].cartes.push({\n        code: paquet[i],\n        image: `https://deckofcardsapi.com/static/img/${paquet[i]}.png`,\n      });\n    }\n  \n    setEtat((ancienEtat) => ({\n      ...ancienEtat,\n      piles,\n      pileCentrale,  // Correcte maintenant la structure de pileCentrale\n    }));\n  };\n  \n\n  function deplacerCarte(carte: CarteH, indexPile: number) {\n    const nouvellesPilesCopy = [...etat.piles]; // Crée une copie de l'état des piles\n\n    // Vérifie que l'élément à l'index spécifié est un tableau avant de l'itérer\n    if (Array.isArray(nouvellesPilesCopy[indexPile].cartes)) {\n      nouvellesPilesCopy[indexPile].cartes = [\n        ...nouvellesPilesCopy[indexPile].cartes,\n        carte,\n      ]; // Ajoute la carte à la pile\n    } else {\n      console.error(\"L'élément à l'index \" + indexPile + \" n'est pas un tableau.\");\n    }\n\n    // Met à jour l'état avec les nouvelles piles\n    setEtat((ancienEtat) => ({ ...ancienEtat, piles: nouvellesPilesCopy }));\n  }\n\n  return (\n    <div className=\"container text-center mt-5\">\n      <h1>Clock Solitaire</h1>\n      <div className=\"row justify-content-center mt-4\">\n        {etat.piles.map((pile, index) => (\n          <div className=\"col-2\" key={index}>\n            <PileHorloge\n              pile={pile.cartes} // Passe des objets CarteH ici\n              indexPile={index}\n              deplacerCarte={deplacerCarte}\n              centrale={false}\n            />\n          </div>\n        ))}\n        <div className=\"col-2\">\n          <PileHorloge\n            pile={etat.pileCentrale.cartes} // Passe des objets CarteH ici\n            indexPile={-1}\n            deplacerCarte={deplacerCarte}\n            centrale={true}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Horloge;\n */\n/* import React, { useState, useEffect } from \"react\";\nimport PileHorloge from \"./PileHorloge\";\nimport { Deck } from \"./Deck\";\nimport { EtatApp, CarteH, Pile } from \"./Types\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst Horloge: React.FC = () => {\n  const [etat, setEtat] = useState<EtatApp>({\n    piles: Array(12).fill(null).map(() => ({ cartes: [] as CarteH[] })), // 12 piles vides\n    pileCentrale: { cartes: [] as CarteH[] }, // Pile centrale vide\n    paquet: [], // Paquet vide\n    cartesRevelees: [], // Aucune carte révélée au départ\n  });\n\n  useEffect(() => {\n    const initialiserJeu = async () => {\n      const nouveauPaquet = await Deck.creerPaquet();\n      setEtat((ancienEtat) => ({ ...ancienEtat, paquet: nouveauPaquet }));\n      distribuerCartes(nouveauPaquet);\n    };\n\n\n    initialiserJeu();\n  }, []);\n\n\n  const distribuerCartes = (paquet: CarteH[]) => {\n    const piles = Array(12).fill(null).map(() => ({ cartes: [] as CarteH[] }));\n\n    console.log(paquet)\n\n    \n    const pileCentrale = { cartes: [] as CarteH[] };\n\n    let indexCarte = 0;\n\n    // Mélanger le paquet pour distribuer les cartes de manière aléatoire\n    paquet.sort(() => Math.random() - 0.5);\n\n\n    // Distribution des 12 piles en cercle (4 cartes par pile, face cachée)\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 12; j++) {\n        piles[j].cartes.push({\n          code: paquet[indexCarte].code, // Correct ici\n          image: paquet[indexCarte].image, // Utiliser directement l'image de l'objet\n          faceVisible: false, // Toutes les cartes commencent face cachée\n          value: paquet[indexCarte].value\n        });\n        indexCarte++;\n      }\n    }\n\n    console.log(piles)\n\n    // Distribution de la pile centrale (4 cartes, face cachée)\n    for (let i = 0; i < 4; i++) {\n      pileCentrale.cartes.push({\n        code: paquet[indexCarte].code, // Correct ici\n        image: paquet[indexCarte].image, // Utiliser l'image de l'objet\n        faceVisible: true,\n        value: paquet[indexCarte].value\n      });\n      indexCarte++;\n    }\n\n    // Choisir une carte au hasard parmi les 4 premières cartes de la pile centrale pour la rendre visible\n    const indexCarteVisible = Math.floor(Math.random() * 4);\n    pileCentrale.cartes[indexCarteVisible].faceVisible = true;\n\n    // Mettre à jour l'état avec les nouvelles piles, la pile centrale et la carte révélée\n    setEtat((ancienEtat) => ({\n      ...ancienEtat,\n      piles,\n      pileCentrale,\n      cartesRevelees: [pileCentrale.cartes[indexCarteVisible]], // Ajouter la carte révélée\n    }));\n  };\n\n  // Fonction pour déplacer une carte dans la pile correspondante\n  const deplacerCarte = (carte: CarteH, indexPile: number) => {\n    console.log(\"index de la pile est \"+indexPile);\n    const nouvellesPiles = [...etat.piles];\n\n    console.log('nouvellesPiles',nouvellesPiles);\n    \n    // Vérifier si la carte peut être déplacée (par exemple, si elle est face visible)\n /*    if (!carte.faceVisible) {\n      alert(`Vous ne pouvez pas déplacer une carte face cachée ! ${indexPile}`);\n      return;\n    } */\n\n    // Ajouter la carte à la pile correspondante et la rendre face visible\n   /* nouvellesPiles[indexPile].cartes.push({ ...carte, faceVisible: true });\n\n    // Mettre à jour l'état avec les nouvelles piles et la carte révélée\n    setEtat((ancienEtat) => ({\n      ...ancienEtat,\n      piles: nouvellesPiles,\n      cartesRevelees: [...ancienEtat.cartesRevelees, carte], // Ajouter la carte aux cartes révélées\n    }));\n  };\n\n  // Fonction pour obtenir l'index de la pile correspondant à une carte\n  const obtenirPileCorrespondante = (carte: CarteH) => {\n    const valeurCarte = carte.code.split(\"_\")[0]; // Extrait la valeur de la carte (par exemple \"2\", \"JACK\", etc.)\n    const rangs: { [key: string]: number } = {\n      \"2\": 2,\n      \"3\": 3,\n      \"4\": 4,\n      \"5\": 5,\n      \"6\": 6,\n      \"7\": 7,\n      \"8\": 8,\n      \"9\": 9,\n      \"10\": 10,\n      \"JACK\": 11,\n      \"QUEEN\": 0,\n      \"KING\": -1,\n      \"ACE\": 1,\n    };\n    return rangs[valeurCarte] ?? -1; // Retourne l'index de la pile correspondant au rang\n  };\n\n  return (\n    <div className=\"container text-center mt-5\">\n      <h1>Clock Solitaire</h1>\n      <div\n        className=\"position-relative\"\n        style={{ width: \"500px\", height: \"500px\", margin: \"0 auto\" }}\n      >\n        {etat.piles.map((pile, index) => {\n          const angle = ((index -3)*30) * (Math.PI / 180);\n          const radius = 180;\n          const x = 250 + radius * Math.cos(angle);\n          const y = 250 + radius * Math.sin(angle);\n          return (\n            <div\n              key={index}\n              className=\"position-absolute\"\n              style={{\n                left: `${x}px`,\n                top: `${y}px`,\n                transform: \"translate(-50%, -50%)\",\n              }}\n            >\n              <PileHorloge\n                pile={pile.cartes}\n                indexPile={index}\n                deplacerCarte={deplacerCarte}\n                centrale={false}\n              />\n            </div>\n          );\n        })}\n        <div className=\"position-absolute top-50 start-50 translate-middle\">\n          <PileHorloge\n            pile={etat.pileCentrale.cartes}\n            indexPile={-1}\n            deplacerCarte={deplacerCarte}\n            centrale={true}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Horloge; */\n\nimport React, { useState, useEffect } from \"react\";\nimport PileHorloge from \"./PileHorloge\";\nimport { Deck } from \"./Deck\";\nimport { EtatApp, CarteH } from \"./Types\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst Horloge: React.FC = () => {\n  const [etat, setEtat] = useState<EtatApp>({\n    piles: Array(12).fill(null).map(() => ({ cartes: [] as CarteH[] })), // 12 piles vides\n    pileCentrale: { cartes: [] as CarteH[] }, // Pile centrale vide\n    paquet: [], // Paquet vide\n  });\n\n  useEffect(() => {\n    const initialiserJeu = async () => {\n      const nouveauPaquet = await Deck.creerPaquet();\n      distribuerCartes(nouveauPaquet);\n    };\n\n    initialiserJeu();\n  }, []);\n\n  const distribuerCartes = (paquet: CarteH[]) => {\n    const piles = Array(12).fill(null).map(() => ({ cartes: [] as CarteH[] }));\n    const pileCentrale = { cartes: [] as CarteH[] };\n\n    let indexCarte = 0;\n    paquet.sort(() => Math.random() - 0.5); // Mélanger\n\n    // Distribuer les 12 piles (4 cartes chacune)\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 12; j++) {\n        piles[j].cartes.push({ ...paquet[indexCarte], faceVisible: false });\n        indexCarte++;\n      }\n    }\n\n    // Distribuer la pile centrale (4 cartes, face cachée sauf la dernière)\n    for (let i = 0; i < 4; i++) {\n      pileCentrale.cartes.push({ ...paquet[indexCarte], faceVisible: i === 3 });\n      indexCarte++;\n    }\n\n    setEtat({ piles, pileCentrale, paquet });\n  };\n\n  const obtenirPileCorrespondante = (carte: CarteH) => {\n    const rangs: { [key: string]: number } = {\n      \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8,\n      \"9\": 9, \"10\": 10, \"JACK\": 11, \"QUEEN\": 0, \"KING\": -1, \"ACE\": 1\n    };\n    return rangs[carte.value] ?? -1;\n  };\n\n  const jouerTour = () => {\n    setEtat((ancienEtat) => {\n      const nouvellesPiles = [...ancienEtat.piles];\n      const nouvellePileCentrale = { ...ancienEtat.pileCentrale };\n\n      if (nouvellePileCentrale.cartes.length === 0) return ancienEtat;\n\n      const carteVisible = nouvellePileCentrale.cartes.pop()!;\n      const indexDestination = obtenirPileCorrespondante(carteVisible);\n\n      if (indexDestination !== -1) {\n        nouvellesPiles[indexDestination].cartes.unshift({ ...carteVisible, faceVisible: true });\n\n        if (nouvellesPiles[indexDestination].cartes.length > 1) {\n          nouvellesPiles[indexDestination].cartes[nouvellesPiles[indexDestination].cartes.length - 2].faceVisible = false;\n        }\n      } else {\n        nouvellePileCentrale.cartes.unshift({ ...carteVisible, faceVisible: true });\n      }\n\n      return { ...ancienEtat, piles: nouvellesPiles, pileCentrale: nouvellePileCentrale };\n    });\n  };\n\n  return (\n    <div className=\"container text-center mt-5\">\n      <h1>Clock Solitaire</h1>\n      <button className=\"btn btn-primary mb-3\" onClick={jouerTour}>Jouer un tour</button>\n      <div className=\"position-relative\" style={{ width: \"500px\", height: \"500px\", margin: \"0 auto\" }}>\n        {etat.piles.map((pile, index) => {\n          const angle = ((index - 3) * 30) * (Math.PI / 180);\n          const radius = 180;\n          const x = 250 + radius * Math.cos(angle);\n          const y = 250 + radius * Math.sin(angle);\n          return (\n            <div key={index} className=\"position-absolute\" style={{ left: `${x}px`, top: `${y}px`, transform: \"translate(-50%, -50%)\" }}>\n              <PileHorloge pile={pile.cartes} indexPile={index} deplacerCarte={jouerTour} centrale={false} />\n            </div>\n          );\n        })}\n        <div className=\"position-absolute top-50 start-50 translate-middle\">\n          <PileHorloge pile={etat.pileCentrale.cartes} indexPile={-1} deplacerCarte={jouerTour} centrale={true} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Horloge;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}